// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id
    createdAt    DateTime       @default(now()) @map(name: "created_at")
    updatedAt    DateTime       @default(now()) @map(name: "updated_at")
    username     String         @unique
    fullname     String
    image        String
    bio          String?
    link         String?
    email        String         @unique
    verified     Boolean?       @default(false)
    privacy      Privacy        @default(PUBLIC)
    followers    User[]         @relation(name: "followers")
    following    User[]         @relation(name: "followers")
    threads      Thread[]
    likedThreads Like[]
    isAdmin      Boolean?       @default(false)
    notification Notification[]

    @@unique([createdAt, id])
}

enum Privacy {
    PUBLIC
    PRIVATE
}

model Thread {
    id             String         @id @default(cuid())
    createdAt      DateTime       @default(now())
    author         User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId       String
    text           String
    images         String[]
    likes          Like[]
    parentThreadId String?
    parentThread   Thread?        @relation("rootThread", fields: [parentThreadId], references: [id], onDelete: Cascade)
    replies        Thread[]       @relation("rootThread")
    notification   Notification[]

    @@unique([createdAt, id])
    @@index([authorId])
}

model Like {
    createdAt DateTime @default(now())
    thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@id([threadId, userId])
    @@index([userId])
    @@index([threadId])
}

model Notification {
    createdAt DateTime         @default(now())
    type      NotificationType
    userId    String
    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    threadId  String
    thread    Thread           @relation(fields: [threadId], references: [id], onDelete: Cascade)
    message   String
    isPublic  Boolean          @default(false)

    @@id([userId, threadId, type])
    @@index([userId])
}

enum NotificationType {
    LIKE
    REPLY
    FOLLOW
    ADMIN
}
