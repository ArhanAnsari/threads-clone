generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id
    createdAt    DateTime       @default(now()) @map(name: "created_at")
    updatedAt    DateTime       @default(now()) @map(name: "updated_at")
    username     String         @unique
    fullname     String?
    image        String?
    bio          String?
    link         String?
    email        String         @unique
    verified     Boolean?       @default(false)
    privacy      Privacy        @default(PUBLIC)
    followers    User[]         @relation(name: "followers")
    following    User[]         @relation(name: "followers")
    posts        Post[]
    likedPosts   Like[]
    isAdmin      Boolean?       @default(false) @map(name: "is_admin")
    notification Notification[]
    reposts      Repost[]
    reports      Report[]

    @@unique([createdAt, id])
}

enum Privacy {
    PUBLIC
    PRIVATE
}

model Post {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    text         String
    images       String[]
    likes        Like[]
    parentPostId String?
    parentPost   Post?          @relation("rootPost", fields: [parentPostId], references: [id], onDelete: Cascade)
    replies      Post[]         @relation("rootPost")
    notification Notification[]
    reposts      Repost[]
    quoteId      String?
    privacy      PostPrivacy    @default(ANYONE)
    reports      Report[]

    @@unique([createdAt, id])
    @@index([authorId])
}

model Like {
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@id([postId, userId])
    @@index([userId])
    @@index([postId])
}

model Repost {
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@id([postId, userId])
    @@index([userId])
}

model Notification {
    createdAt DateTime         @default(now())
    type      NotificationType
    userId    String
    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId    String
    post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
    message   String
    isPublic  Boolean          @default(false)

    @@id([userId, postId, type])
    @@index([userId])
}

enum NotificationType {
    ADMIN
    LIKE
    REPLY
    FOLLOW
    REPOST
    QUOTE
}

enum PostPrivacy {
    FOLLOWED
    ANYONE
    MENTIONED
}

model Report {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    reason    String
    post      Post?    @relation(fields: [postId], references: [id])
    postId    String?
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}
